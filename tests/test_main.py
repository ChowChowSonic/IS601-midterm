"""Testing the main driver code """

import sys
import pytest
from main import calculate_and_print


# Parameterize the test function to cover different operations and scenarios, including errors
@pytest.mark.parametrize(
    "a_string, b_string, operation_string, expected_string",
    [
        ("5", "3", "add", "The result of 5 add 3 is equal to 8"),
        ("10", "2", "subtract", "The result of 10 subtract 2 is equal to 8"),
        ("4", "5", "multiply", "The result of 4 multiply 5 is equal to 20"),
        ("20", "4", "divide", "The result of 20 divide 4 is equal to 5"),
        (
            "1",
            "0",
            "divide",
            "An error occurred: Cannot divide by zero",
        ),  # Adjusted for the actual error message
        (
            "9",
            "3",
            "unknown",
            "Unknown operation: unknown",
        ),  # Test for unknown operation
        (
            "a",
            "3",
            "add",
            "Invalid number input: a or 3 is not a valid number.",
        ),  # Testing invalid number input
        (
            "5",
            "b",
            "subtract",
            "Invalid number input: 5 or b is not a valid number.",
        ),  # Testing another invalid number input
    ],
)
def test_calculate_and_print(
    a_string, b_string, operation_string, expected_string, capsys
):
    """Test's the main calculate & print class"""
    calculate_and_print([a_string, b_string, operation_string])
    captured = capsys.readouterr()
    assert captured.out.strip() == expected_string


def test_calculation(a_input, b_input, operation, expected, capsys):
    """runs every test generated by --num_records=x"""
    calculate_and_print([a_input, b_input, operation])
    captured = capsys.readouterr()
    assert (
        captured.out.strip()
        == f"The result of {a_input} {operation} {b_input} is equal to {expected}"
    )


def test_div_by_0(capsys):
    """Tests that dividing by 0 throws the expected error"""
    calculate_and_print(["1", "0", "divide"])
    captured = capsys.readouterr()
    assert captured.out.strip() == "An error occurred: Cannot divide by zero"


def test_from_pipe(capsys):
    """Tests piping input into program"""
    with open("testdata.txt", "r", encoding="utf-8") as file:
        oldstdin = sys.stdin
        sys.stdin = file
        calculate_and_print()
        cap = capsys.readouterr()
        print(cap.out)
        assert (
            "The result of 1 add 2 is equal to 3" in cap.out
            and "add" in cap.out
            and "subtract" in cap.out
            and "multiply" in cap.out
            and "divide" in cap.out
        )
        sys.stdin = oldstdin


def test_logging():
    """Tests that logging works"""
    with open("logs/app.log", "w", encoding="utf-8") as file:
        pass
    calculate_and_print([1, 1, "divide"])
    with open("logs/app.log", encoding="utf-8") as file:
        assert file.readline().strip().endswith("root - INFO - App started")
        line = file.readlines()[-1]
        assert (
            line
            .strip()
            .endswith("root - INFO - Executed command divide with args [1, 1]")
        )

def test_history():
    """Tests the history function by reading off the CSV directly"""
    with open("logs/history.csv", 'w', encoding='utf-8'):
        pass
    calculate_and_print([1, 1, "divide"])
    calculate_and_print([4, 2, "divide"])
    calculate_and_print([4, 2, "multiply"])

    with open("logs/history.csv", 'r', encoding='utf-8') as file:
        mock_hist=["divide,1,1\n", "divide,4,2\n", "multiply,4,2\n"]
        lines=file.readlines()
        for x in enumerate(lines):
            assert mock_hist[x[0]] == lines[x[0]]
